package ru.porabote.springbootrestauth.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import ru.porabote.springbootrestauth.components.FilesComponent;
import ru.porabote.springbootrestauth.model.FileModel;
import ru.porabote.springbootrestauth.repository.FileRepository;

import java.io.File;
import java.io.IOException;

@Controller // This means that this class is a Controller
//@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class FilesController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private FileRepository fileRepository;

    @PostMapping(path="/file")
    public @ResponseBody String addFile (@RequestParam String filename, @RequestParam MultipartFile file) throws IOException {

        String dirPath = "/Users/polosaty/Documents/Repositories/netology/netology-diplom/rest-server/src/main/storage/uploaded/";
        FilesComponent.makeDirectory(dirPath);
        FilesComponent.makeFile(dirPath + filename);

        File fileTmp = new File(dirPath + filename);
        fileTmp.createNewFile();

        file.transferTo(fileTmp);

        FileModel f = new FileModel();
        f.setFilename(filename);
        f.setSize(fileTmp.length());
        fileRepository.save(f);
        return "Saved";
    }

    @DeleteMapping(path="/file")
    public @ResponseBody String addFile (@RequestParam String filename) throws IOException {

        String dirPath = "/Users/polosaty/Documents/Repositories/netology/netology-diplom/rest-server/src/main/storage/uploaded/";

//        FileModel f = new FileModel();
//        f.setFilename(filename);
        fileRepository.deleteByFilename(filename);
        return "Deleted";
    }

    @GetMapping(path="/file")
    public @ResponseBody Iterable<FileModel> download(@RequestParam String filename) {
        // This returns a JSON or XML with the users
        return fileRepository.findFirstByFilename(filename);
    }

    @PutMapping(path="/file")
    public @ResponseBody String edit(@RequestParam String filename) {
        // This returns a JSON or XML with the users
        return "Edited";
       // return fileRepository.findFirstByFilename(filename);
    }

    @GetMapping(path="/list")
    public @ResponseBody Iterable<FileModel> getAllUsers() {
        // This returns a JSON or XML with the users
        return fileRepository.findAll();
    }
}